type Query {
    topics: [Topic]
    topic(topic: String): Topic
    partitionMetaData(topic: String, partition: Int): Partition
    getOffsets(topic: String, partition: Int): PartitionOffsetInfo
    getSubscriptions(group: String, instance: String): [String]
    consumeBinary(group: String, instance: String): [ConsumedRecord]
    consumeAvro(group: String, instance: String): [ConsumedRecord]
}

type Mutation {
    produceBinary(topic: String, records: [Record]): [Offset]
    produceAvro(topic: String, records: [AvroRecord]): [SchemaInfo]
    addConsumer(group: String, consumer: Consumer): ConsumerInfo
    subscribe(group: String, instance: String, topics: [String]): String
}

type SchemaInfo {
    keyId: Int
    valueId: Int
}

input AvroRecord {
    key_schema: String
    key_schema_id: Int
    value_schema: String
    value_schema_id: Int
    key: String
    value: String
}

type ConsumedRecord {
    topic: String
    key: String
    value: String
    partition: String
    offset: String
}

type ConsumerInfo {
    instance_id: String
}

input Consumer {
    name: String
    format: String
    auto_offset_reset: String
    auto_commit_enable: String
    fetch_min_bytes: Int
    request_timeout_ms: Int
}

type Offset{
    partition: Int
    offset: Int
}

input Record {
    key: String
    value: String
    partition: Int
}

type Topic {
    name: String
    configs: [Property]
    partitions: [Partition]
}

type Property {
    key: String
    value: String
}

type Partition {
    id: Int
    leader: Int
    replicas: [Replica]
}

type PartitionOffsetInfo {
    partition: Int
    beginning_offset: Int
    end_offset: Int
}

type Replica {
    broker: Int
    leader: Boolean
    in_sync: Boolean
}










